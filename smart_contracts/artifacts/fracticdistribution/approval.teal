#pragma version 8
intcblock 0 1 4
bytecblock 0x64 0x 0x70 0x151f7c75 0x00
txn NumAppArgs
intc_0 // 0
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0xcc694eaa // "create(address)void"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x22e6373c // "init_fractic_nft_flow(axfer,uint64,uint64)bool"
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0x2edef112 // "opt_in_to_asset(pay)bool"
==
bnz main_l5
err
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub optintoassetcaster_7
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub initfracticnftflowcaster_6
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
callsub createcaster_5
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_2 // UpdateApplication
==
bnz main_l12
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l11
err
main_l11:
txn ApplicationID
intc_0 // 0
!=
assert
callsub delete_2
intc_1 // 1
return
main_l12:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_1
intc_1 // 1
return

// create
create_0:
proto 1 0
pushbytes 0x64616f // "dao"
frame_dig -1
app_global_put
retsub

// update
update_1:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint TMPL_UPDATABLE // TMPL_UPDATABLE
// Check app is updatable
assert
retsub

// delete
delete_2:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint TMPL_DELETABLE // TMPL_DELETABLE
// Check app is deletable
assert
retsub

// init_fractic_nft_flow
initfracticnftflow_3:
proto 3 1
intc_0 // 0
bytec_1 // ""
intc_0 // 0
dup
bytec_1 // ""
intc_0 // 0
dup
bytec_1 // ""
dup
frame_dig -1
pushint 100 // 100
<=
assert
txna Assets 0
frame_dig -3
gtxns XferAsset
==
assert
bytec_0 // "d"
txna Assets 0
itob
concat
box_len
store 1
store 0
load 1
assert
bytec_0 // "d"
txna Assets 0
itob
concat
box_get
store 3
store 2
load 3
assert
load 2
txn Sender
==
assert
txn Sender
frame_bury 1
frame_dig 1
len
pushint 32 // 32
==
assert
intc_0 // 0
frame_bury 2
txna Assets 0
asset_params_get AssetURL
store 5
store 4
load 5
assert
txna Assets 0
asset_params_get AssetMetadataHash
store 7
store 6
load 7
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
intc_0 // 0
itxn_field ConfigAssetDefaultFrozen
pushbytes 0x465243 // "FRC"
itxn_field ConfigAssetUnitName
global CurrentApplicationAddress
itxn_field ConfigAssetManager
global CurrentApplicationAddress
itxn_field ConfigAssetReserve
global CurrentApplicationAddress
itxn_field ConfigAssetClawback
frame_dig -1
itxn_field ConfigAssetTotal
intc_0 // 0
itxn_field ConfigAssetDecimals
load 4
itxn_field ConfigAssetURL
load 6
itxn_field ConfigAssetMetadataHash
pushbytes 0x7b227374616e64617264223a20226172633639227d // "{\"standard\": \"arc69\"}"
itxn_field Note
itxn_submit
itxn CreatedAssetID
frame_bury 3
frame_dig -2
itob
frame_dig 1
concat
frame_dig -1
itob
concat
frame_dig 3
itob
concat
frame_bury 4
bytec_2 // "p"
txna Assets 0
itob
concat
box_del
pop
bytec_2 // "p"
txna Assets 0
itob
concat
frame_dig 4
box_put
intc_1 // 1
frame_bury 0
retsub

// opt_in_to_asset
optintoasset_4:
proto 1 1
intc_0 // 0
bytec_0 // "d"
txna Assets 0
itob
concat
box_len
store 9
store 8
load 9
!
assert
txn NumAssets
intc_0 // 0
==
!
assert
txna Assets 0
asset_params_get AssetDecimals
store 11
store 10
load 11
assert
load 10
intc_0 // 0
==
assert
txna Assets 0
asset_params_get AssetTotal
store 13
store 12
load 13
assert
load 12
intc_1 // 1
==
assert
txna Assets 0
asset_params_get AssetCreator
store 15
store 14
load 15
assert
load 14
txn Sender
==
assert
frame_dig -1
gtxns Sender
txn Sender
==
assert
frame_dig -1
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -1
gtxns Amount
pushint 100000 // 100000
==
assert
itxn_begin
intc_2 // axfer
itxn_field TypeEnum
intc_0 // 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
txna Assets 0
itxn_field XferAsset
itxn_submit
bytec_0 // "d"
txna Assets 0
itob
concat
box_del
pop
bytec_0 // "d"
txna Assets 0
itob
concat
txn Sender
box_put
intc_1 // 1
frame_bury 0
retsub

// create_caster
createcaster_5:
proto 0 0
bytec_1 // ""
txna ApplicationArgs 1
frame_bury 0
frame_dig 0
callsub create_0
retsub

// init_fractic_nft_flow_caster
initfracticnftflowcaster_6:
proto 0 0
intc_0 // 0
dupn 3
txna ApplicationArgs 1
btoi
frame_bury 2
txna ApplicationArgs 2
btoi
frame_bury 3
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_2 // axfer
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
callsub initfracticnftflow_3
frame_bury 0
bytec_3 // 0x151f7c75
bytec 4 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub

// opt_in_to_asset_caster
optintoassetcaster_7:
proto 0 0
intc_0 // 0
dup
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
callsub optintoasset_4
frame_bury 0
bytec_3 // 0x151f7c75
bytec 4 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub